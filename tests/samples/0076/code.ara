namespace where;

const u8 where = 1;
interface where {}
class where {
    public const u8 where = 1;

    public function where(): void {}
}

function where(): where {
    $where = where;
    $where = new where();
    $where = where::where;
    $where = where::where();
    $where = where::where::where;
    $where = where::where::where();
    $where = $where->where();

    $where
}

function where(): int {
    where
}

namespace type;

const u8 type = 1;
interface type {}
class type {
    public const u8 type = 1;

    public function type(): void {}
}

function type(): type {
    $type = type;
    $type = new type();
    $type = type::type;
    $type = type::type();
    $type = type::type::type;
    $type = type::type::type();
    $type = $type->type();

    $type
}

function type(): int {
    type
}
